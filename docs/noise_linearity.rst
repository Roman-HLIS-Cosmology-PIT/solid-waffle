Noise and linearity scripts
###########################

These scripts generate noise and linearity measurements.

Noise script
============

The noise script computes several properties of the dark frames that are useful for making noise models. Its main output is a FITS summary file rather than a calibration reference file; calibration files of various forms could be assembled from it.

Calling format
--------------

The noise script has both a command-line and dictionary interface. The command-line can be called via::

  python -m solid_waffle.noise_run -f 4 \
    -i swtest/20191018_95K_1p1m0p1_ch0_1400nm_gr3_filt5_shutter_closed_20829_001.fits \
    -o swtest/noiseprop.fits -n 10 -t 2 -cd 6.0 -rh 7 -tn 55

The command line options are:

* ``-f``: Format type (see `script information <ScriptInformation.rst#format>`_ for options).

* ``-i``: The first input file. (Subsequent files will be generated by replacement of the suffix: ``..._001.fits`` becomes ``..._002.fits``, ``..._003.fits``, etc.)

* ``-o``: The output FITS file.

* ``-n``: The number of input files to take.

* ``-t``: The first time stamp to use (in principle this could be 1, but sometimes this is the read/reset frame and its behavior is a bit weird).

* ``-cd``: Threshold in DN for flagging a pixel as having low CDS noise.

* ``-rh``: Row overhead for 1/f noise estimation (usually has a small effect except on high-frequency lines).

* ``-tn``: Number of frames to take in estimating total noise.

* ``-nch``: Number of output channels (default is 32, appropriate for Roman).

* ``-ro``: Optional, if provided include reference output (no argument).

This could also be written in dictionary form::

  from solid_waffle.noise_run import run_noise

  run_noise({
      "-f": 4,
      "-i": "swtest/20191018_95K_1p1m0p1_ch0_1400nm_gr3_filt5_shutter_closed_20829_001.fits",
      "-o": "swtest/noiseprop.fits",
      "-n": 10,
      "-t": 2,
      "-cd": 6.0,
      "-rh": 7,
      "-tn": 55
      },
      verbose=True # this is if you want lots of output; otherwise can skip
  )

(If you want the ``-ro`` option, which doesn't include an argument, you can include ``"-ro": True``.)

Outputs
-------

The output FITS file contains 4 or 5 HDUs (depending on whether the reference output is enabled).

Primary HDU
^^^^^^^^^^^

This one is blank.

NOISE Image HDU
^^^^^^^^^^^^^^^

This contains the main noise properties. The header contains the keywords:

* ``TGROUP`` : The time between input groups (in seconds).

* ``TDARK1`` : The time baseline for dark measurement for warm/hot pixels (in seconds).

* ``TDARK2`` : The time baseline for dark measurement for normal pixels (in seconds).

* ``ACN`` : Alternating column noise amplitude (in DN).

* ``C_PINK`` : Correlated (across all 32 channels) 1/f noise amplitude (in DN).

* ``U_PINK`` : Uncorrelated (independent of channel) 1/f noise amplitude (in DN).

* ``PCA0_AMP`` : Amplitude of PCA0 (in DN, but usually small so we don't plan to do anything with this in Roman calibration).

* ``NR_MF001``, ``NR_MF002``, etc. : Source files.

* ``CDS_CUT`` : The cut on CDS noise for a normal pixel (in DN); same as the ``-cd`` argument.

* ``CDS_MED`` : The median per-pixel CDS noise (in DN).

* ``TOT_MED`` : The median per-pixel total noise (in DN).

* ``LCHTN1``, ``LCHTN3``, ``LCHTN5`` : Number of low CDS, high total noise pixels; and the numbers if you flag the 3x3 and 5x5 regions around each such pixel.

* ``NR_DATE`` : The date and time of creation of the file.

The data cube has shape (10, N, N), where N is the SCA size (4096 for Roman). The slices of the cube contain, in order:

* [``BIAS``] The median of the first frame in DN (between 0 and 65535 with 0 being "low").

* [``RESET``] The quartile-based equivalent standard deviation (IQR/1.34896, equal to the standard deviation for a Gaussian) of the post-reset frame in DN.

* [``CDS``] The per-pixel CDS noise in DN.

* [``PCA0``] The first principal component (PCA0) map.

* [``DARK1``] The dark current on short baseline (for hot/warm pixels) in DN/s.

* [``DARK2``] The dark current on long baseline (for normal pixels) in DN/s.

* [``TNOISE``] The per-pixel total noise in DN.

* [``LCDSHTN``] Whether a pixel is flagged as low CDS, high total noise (1 if flagged, 0 if normal).

* [``DARK1ERR``] The dark current error on short baseline in DN/s.

* [``DARK2ERR``] The dark current error on long baseline in DN/s.

Note that this ordering is as displayed as 1--10 in ds9 (or Fortran); in C or Python the slices are numbered 0--9. They are identified with the FITS keywords in brackets. The keywords identified will be preserved in the future, so it is recommended that a script wanting the dark current on long baseline should call::

  with fits.open(noisefile) as f:
      dark2 = f['NOISE'].data[int(f['NOISE'].header['DARK2']),:,:]

PS Image HDU
^^^^^^^^^^^^

This is an 2D image of shape (number_of_spectra, number_of_frequencies). Here:

* number_of_spectra is the number of spectra generated. That includes the active channels in order (rows 0--31 for Roman) and the average of these channels (row 32 for Roman). If ``-ro`` is specified, then there is a row 33 for "average of other science channels PLUS reference output" and a row 34 for "average of other science channels MINUS reference output".

* number_of_frequencies is the number of frequency bins. This is the number of pixel per channel (4096x128=524288 for Roman) plus row overheads. This starts at zero frequency.

NOISEHIST Image HDU
^^^^^^^^^^^^^^^^^^^

This is a 2D histogram of the CDS and total noise of shape (N_np, N_np). The axes if plotted in ds9 are CDS noise on the x axis and total noise on the y axis. The lower-left corner is (0,0), and the bin spacing is in the ``DNOISE`` keyword. (The maximum noise on the plot is given by the ``MAXNOISE`` keyword.) All noise measurements are in DN.

AMP33 Image HDU (if requested)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is only returned if the ``-ro`` option is turned on. The header includes ``M_PINK`` and ``RU_PINK``. So the idea is that the 1/f noise n_r in the reference output is related to the correlated noise in the other channels n_c via

  n_r = m*n_c + n_{ru},

where m is the value in the ``M_PINK`` keyword; and n_{ru} is 1/f noise with an amplitude given by ``RU_PINK`` (in DN).

The image has shape (2, N, Nw), where N is the size of the SCA (4096 for Roman) and Nw is the channel width (128 for Roman). The [0,:,:] slice is the median reference signal (in DN), and the [1,:,:] is the robust (IQR-based) standard deviation.

Note that the reference output isn't a physical set of pixels so there aren't hot or noisy pixels like there are in the physical SCA. However, in a given read pattern there are commonly "features" that are synchronous with the row stepping and guide window interlacing, so it is important to have a full pixel map.

Linearity script
================

Calling format
--------------

Outputs
-------

